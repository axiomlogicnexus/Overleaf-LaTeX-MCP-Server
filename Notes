Git session workflow
POST /git/startSession: clone/fetch and checkout mcp-session/ or provided branch.
POST /git/commitPatch: pre-commit policy scan (large files/LFS pointers), stage and commit, return SHA.
POST /git/pullPush: pull (ff-only or rebase) and push.
Project utilities
GET /projects: list from projects.json.
GET /statusSummary?projectId=...: summarize files and git status.
Compile and artifacts
POST /compile and POST /compileAsync with policy enforcement (allowedExtensions and allowedCompilers).
GET /compileStatus?operationId=...
GET /artifacts/:id via ArtifactStore (TTL-guarded).
LocalProvider executes latexmk/xelatex/pdflatex with safe spawn and improved diagnostics parsing.
Text patching
POST /text/get and POST /text/patch with baseHash and per-hunk expectedHash.
Caps, health, metrics
GET /capabilities, GET /health, GET /metrics.
Policy enforcement
Pre-commit scan for large files and Git LFS pointers.
Compile/text requests enforce allowed extensions and compilers based on project policy.
Docs and change log updated
API.md extended with /projects and /statusSummary plus policy checks.
CHANGELOG.md updated to 0.1.1 detailing new endpoints, policy, and diagnostics.


Next implementation steps

Register MCP tool handlers for compile, artifacts, text patching, git session, projects, health/capabilities to match the HTTP functionality.
Enhance diagnostics taxonomy and codes; improve file/line extraction further.
Add binary/LFS detection to pre-receive emulation for push.
Add list_projects and status_summary MCP tools and align API docs automatically with schemas.
No additional input required. I will move on to MCP tool registration and diagnostics improvements next.

If you want, I can now:

Register MCP tools mirroring these HTTP endpoints so an MCP client can drive the flows directly.
Add examples of projects.json with per-project policy and Overleaf Cloud remote URLs.




NOTE:

aligning the running      
  server with the source code is the right thing to do      
  to avoid this confusion.

  The project is configured to compile the TypeScript       
  from src/ into a dist/ directory. The
  overleaf-mcp-server/server.js file appears to be an       
  outdated artifact.

  I will proceed with building the TypeScript source        
  code, which will generate the correct dist/server.js      
   file. Then we can run the server from there.

  First, let's confirm the output directory in
  tsconfig.json.
 ╭────────────────────────────╮
 │ ✔ ReadFile tsconfig.json  │
 ╰────────────────────────────╯
✦ Excellent. The tsconfig.json confirms that the
  compiled output from the src directory will be placed     
  in the dist directory.

  This means the overleaf-mcp-server/server.js file is      
   indeed an outdated artifact and is not part of the       
  current build process. To prevent future confusion,       
  I recommend deleting it.

  Would you like me to delete
  overleaf-mcp-server/server.js before we proceed with      
   building and starting the correct server?

╭───────────────────────────╮
│  > y, proceed afterwards  │







/compile returns "success": /compileAsync returns "success"; /compileStatus?operationId= returns "success"; /git/startSession returns "success"; /text/get (A & B) returns "success"; 