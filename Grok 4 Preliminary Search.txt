Hooks from mjyoo2/OverleafMCPThis repository provides MCP tools focused on managing Overleaf projects, primarily through Git integration. The tools are exposed via the MCP Server for AI-driven interactions.Tool Name
Description/Purpose
list_projects
List all configured projects.
list_files
List files in a project (default: .tex files). Supports optional parameters like extension (file extension filter) and projectName.
read_file
Read a specific file from the project. Requires filePath; optional projectName.
get_sections
Get all sections from a LaTeX file. Requires filePath; optional projectName.
get_section_content
Get content of a specific section. Requires filePath and sectionTitle; optional projectName.
status_summary
Get a comprehensive project status summary. Optional projectName.

Hooks from unnipv/overleaf-mcpThis fork or variant of Overleaf MCP emphasizes creation and compilation tools for LaTeX documents, with some overlap but additional focus on structured content generation.Tool Name
Description/Purpose
create_document
Create a new LaTeX document.
compile_document
Compile the current document.
fix_errors
Identify and fix compilation errors.
create_equation
Create a LaTeX equation.
create_table
Generate a LaTeX table.
create_figure
Insert a figure with caption.
create_section
Add a new document section.
download_from_overleaf
Download files or projects from Overleaf (may include instructions or workflow).
prepare_for_upload
Package a project for Overleaf upload.

Hooks from tumf/mcp-text-editor (and mcp-text-editor)These appear to refer to the same repository, which is an MCP Server specialized for line-oriented text file editing. It's not Overleaf-specific but can integrate with Overleaf MCP for precise edits.Tool Name
Description/Purpose
get_text_file_contents
Get the contents of one or more text files with line range specification, supporting single/multiple ranges and optional encoding (defaults to utf-8).
patch_text_file_contents
Apply patches to text files with robust error handling, conflict detection (hash-based validation), and support for editing multiple files in one operation. Handles line number shifts.

Hooks/Operations from Git IntegrationOverleaf's Git integration treats projects as remote Git repositories, allowing standard Git operations via a project-specific Git URL and authentication token. These are not formal "hooks" like MCP tools but underlying operations that MCP servers (e.g., mjyoo2/OverleafMCP) wrap to implement tools like read_file or write_file. Based on documentation, key operations include:Operation
Description/Purpose
git clone
Clone an Overleaf project to a local repository using the provided Git URL.
git pull
Pull changes from the Overleaf remote to sync local files.
git push
Push local changes (e.g., file modifications) back to the Overleaf project.
git commit
Commit changes locally before pushing to Overleaf (often automated in MCP workflows).
git fetch
Fetch updates from Overleaf without merging, useful for status checks.

These enable file-level access and are the foundation for many MCP tools, but require configuration with project IDs and tokens (e.g., in projects.json).Hooks/Endpoints from CLSI APIThe Common LaTeX Service Interface (CLSI) is Overleaf's RESTful API for compiling LaTeX documents in the cloud. It provides endpoints for project management and compilation, not granular text manipulation. These are HTTP endpoints rather than MCP-style hooks, but MCP servers often call them internally (e.g., for fix_errors or compile_document). Based on available documentation from Overleaf's GitHub and related sources, key endpoints include:Endpoint/Operation
Description/Purpose
POST /project/{project_id}/compile
Compile a LaTeX project and return outputs (e.g., PDF, logs). Supports uploading resources as ZIP or individual files. Returns JSON with status, errors, and output files.
GET /project/{project_id}/output/{file}
Retrieve compiled output files (e.g., PDF, log) after compilation.
POST /project/{project_id}
Create or update a project by uploading files/resources (e.g., as a ZIP archive).
DELETE /project/{project_id}
Delete a project or its resources.
GET /project/{project_id}/status
Check the status of a compilation or project.

CLSI focuses on compilation and resource management; error responses include logs for debugging. It's used in self-hosted Overleaf setups and can be extended, but no public endpoints for direct text editing.Proposed HooksBased on the existing tools (e.g., file reading/writing, section management, and patching), I propose the following additional MCP hooks to enhance functionality, particularly for granular editing, AI integration, and hybrid workflows (e.g., combining Overleaf with local editors like TeXstudio). These could be implemented in a forked MCP Server by wrapping Git/CLSI operations or external libraries (e.g., LaTeX parsers).Proposed Tool Name
Description/Purpose
edit_file_line
Edit a specific line in a file (insert, delete, replace) with conflict detection. Could integrate patch_text_file_contents from mcp-text-editor for line-based operations after reading via Git.
delete_section
Remove a specific section from a LaTeX file by parsing and updating content, then pushing via Git.
insert_paragraph
Insert a paragraph or block of text at a specified location (e.g., after a section), using local parsing and Git push.
generate_bib_entry
Generate and insert a BibTeX entry into a .bib file, potentially using AI for citation suggestions.
sync_with_local
Sync Overleaf project with a local directory or editor (e.g., TeXstudio), automating git pull/push and local compilation.
analyze_structure
Analyze the full LaTeX document structure (sections, equations, figures) and return a tree-like summary for navigation.
auto_format
Automatically format LaTeX code (e.g., indentation, line breaks) using a parser, then update via write_file.
collaborate_merge
Detect and resolve merge conflicts during multi-user edits, integrating Git merge tools.
preview_pdf
Compile via CLSI and return a preview URL or snippet of the PDF output.
search_content
Search for text or patterns across project files, returning matches with line numbers.

These proposals build on gaps in the current tools (e.g., more precise editing beyond whole-file overwrites) and could leverage existing ones like read_file or patch_text_file_contents for implementation. If developing a fork, start by adding them to the MCP Server's registration logic (e.g., in overleaf-mcp-server.js).

